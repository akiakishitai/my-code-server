name: Docker Build
"on":
  push:
    branches-ignore:
    - main
    - release
    paths:
    - .dockerignore
    - .dockleignore
    - .github/workflows/docker-*.yml
    - docker/**
jobs:
  hadolint:
    name: docker / hadolint
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: hadolint
      uses: hadolint/hadolint-action@v1.5.0
      with:
        dockerfile: ./docker/Dockerfile
        ignore: DL3007 DL3008 DL3018
    runs-on: ubuntu-20.04
  build:
    name: docker / build
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ env.CACHE_PREFIX }}-${{ env.CACHE_NAME }}-${{ github.ref }}-${{ hashFiles('**/docker/Dockerfile') }}
        restore-keys: |
          ${{ env.CACHE_PREFIX }}-${{ env.CACHE_NAME }}-${{ github.ref }}-
          ${{ env.CACHE_PREFIX }}-${{ env.CACHE_NAME }}-
          ${{ env.CACHE_PREFIX }}-dockerfile-
      env:
        CACHE_PREFIX: ${{ runner.os }}-build
        CACHE_NAME: code-server-dockerfile
    - name: Build
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: false
        context: ./docker
        platforms: |
          linux/amd64
          linux/arm64
        tags: |
          ${{ env.BUILD_IMAGE }}:latest
          ${{ env.BUILD_IMAGE }}:v1
        cache-from: |
          type=local,src=/tmp/.buildx-cache
        cache-to: |
          type=local,dest=/tmp/.buildx-cache-new
      env:
        BUILD_IMAGE: ${{ github.repository }}
    - name: Move Cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    runs-on: ubuntu-20.04
  scan:
    name: docker / vulnerability scan
    needs: build
    services:
      registry:
        image: registry:2
        ports:
        - 5000:5000
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        driver-opts: network=host
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ env.CACHE_PREFIX }}-${{ env.CACHE_NAME }}-${{ github.ref }}-${{ hashFiles('**/docker/Dockerfile') }}
        restore-keys: |
          ${{ env.CACHE_PREFIX }}-${{ env.CACHE_NAME }}-${{ github.ref }}-
          ${{ env.CACHE_PREFIX }}-${{ env.CACHE_NAME }}-
          ${{ env.CACHE_PREFIX }}-dockerfile-
      env:
        CACHE_PREFIX: ${{ runner.os }}-build
        CACHE_NAME: code-server-dockerfile
    - name: Build
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        context: ./docker
        platforms: |
          linux/amd64
          linux/arm64
        tags: |
          ${{ env.BUILD_IMAGE }}:latest
          ${{ env.BUILD_IMAGE }}:v1
        cache-from: |
          type=local,src=/tmp/.buildx-cache
      env:
        BUILD_IMAGE: localhost:5000/${{ github.repository }}
    - name: Enable problem matcher
      run: echo "::add-matcher::.github/workflows/dockle-problem-matcher.json"
    - name: Run Dockle
      uses: docker://goodwithtech/dockle:latest
      with:
        args: --exit-code 1 registry:5000/${{ github.repository }}:latest
      env:
        DOCKLE_INSECURE: true
        DOCKLE_NON_SSL: true
    - name: Run Trivy
      if: ${{ always() }}
      uses: aquasecurity/trivy-action@0.0.18
      with:
        image-ref: registry:5000/${{ github.repository }}:latest
        format: table
        exit-code: 1
        ignore-unfixed: true
        vuln-type: os,library
        severity: CRITICAL,HIGH
      env:
        TRIVY_NON_SSL: true
    runs-on: ubuntu-20.04
